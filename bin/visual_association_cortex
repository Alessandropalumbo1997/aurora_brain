#!/usr/bin/env python
import rospy
import time
from std_msgs.msg import String
from std_msgs.msg import Float64
from brain.msg import visual_association_cortex_msg, hcsr04_msg
from cob_perception_msgs.msg import Detection, DetectionArray, Rect

class Hcsr04:
    distance = 0
    distance_timestamp = 0

    # Expressed in cm/sec
    approaching_speed = 0

    def __init__(self, name):
        self.name = name

    # Here we calculate the speed of objects moving towards or away from the dog and update the last_distance value
    # Negative value -> object going away, positive value -> object approaching
    def calculate_approaching_speed(new_distance):
        current_time = time.time()
        self.approaching_speed = (distance - new_distance) / (current_time - distance_timestamp)
        self.distance = new_distance
        self.distance_timestamp = current_time


class ObjectDetection:

    # Confidence in percentage
    score = 0
    label = ""
    timestamp = 0

    def __init__(self, label, score, timestamp):
        self.score = score
        self.label = label
        self.timestamp = timestamp

    def update(self, label, score, timestamp):
        self.timestamp = timestamp
        self.score = score
        self.label = label


def callback_camera(data):

    current_time = time.time()
    found = False

    # Here we update the object_detections array, there are 3 cases:
    # 1. the detection is older than 3 seconds -> we remove it to send only detections of the last 3 seconds
    # 2. the detection is already present in object_detections, we update its timestamp
    # 3. the detection is new, we append it to object_detections
    for index, detection in enumerate(data.detections):

        for item in object_detections:
            found = False

            if time.time() - item.timestamp >= 3:
                object_detections.remove(item)

            if detection.label == item.label:
                found = True
                item.update(detection.label, int(detection.score*100), current_time)

        if not found:
            object_detections.append(ObjectDetection(detection.label, detection.score, current_time))

    pub.publish(msg)


def callback_hcsr04(data):

    # Updating Hcsr04 instances data
    for hcsr04_sensor in hcsr04_sensors:
        if data.name == hcsr04_sensor.name:
            hcsr04_sensor.calculate_approaching_speed(data.distance)

    pub.publish(msg)


def listener():
    rospy.init_node('visual_association_cortex', anonymous=True)
    rospy.Subscriber('hcsr04', hcsr04_msg, callback_hcsr04)
    rospy.Subscriber('object_detection/detections', DetectionArray, callback_camera)

    rospy.spin()


if __name__ == '__main__':

    pub = rospy.Publisher('visual_association_cortex', visual_association_cortex_msg, queue_size=10)

    hcsr04_sensors = [
                        Hcsr04('lateral_left'),
                        Hcsr04('lateral_right'),
                        Hcsr04('frontal_left_left'),
                        Hcsr04('frontal_left'),
                        Hcsr04('frontal_right'),
                        Hcsr04('frontal_right_right'),
                        Hcsr04('bottom_left'),
                        Hcsr04('bottom_right')
                    ]

    object_detections = []

    msg = visual_association_cortex_msg()
    msg.hcsr04_sensors = hcsr04_sensors
    msg.object_detections = object_detections

    listener()
