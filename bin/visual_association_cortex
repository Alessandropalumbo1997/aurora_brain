#!/usr/bin/env python
import rospy
import time
from std_msgs.msg import String
from std_msgs.msg import Float64
from cob_perception_msgs.msg import Detection, DetectionArray, Rect
from brain.msg import hcsr04_msg

class Hcsr04:
    distance = 0
    distance_timestamp = 0
    approaching_speed = 0

    def __init__(self, name):
        self.name = name

    # Here we calculate the speed of objects moving towards or away from the dog and update the last_distance value
    # Negative value -> object going away, positive value -> object approaching
    def calculate_approaching_speed(new_distance):
        current_time = time.time()
        self.approaching_speed = (distance - new_distance) / (current_time - distance_timestamp)
        self.distance = int(new_distance)
        self.distance_timestamp = current_time


def callback_camera(data):
    for index, detection in enumerate(data.detections):
        rospy.loginfo(rospy.get_caller_id() +
         '\n Index: {}'.format(index) +
         '\n Label: {}'.format(detection.label) +
         '\n Score: {}'.format(int(detection.score*100)) + '%')

def callback_hcsr04(data):

    # Updating Hcsr04 instances data
    for hcsr04_sensor in hcsr04_sensors:
        if data.name == hcsr04_sensor.name:
            hcsr04_sensor.calculate_approaching_speed(data.distance)

    rospy.loginfo(rospy.get_caller_id() + '\n H: {}'.format(data.data))


def listener():
    rospy.init_node('visual_association_cortex', anonymous=True)
    rospy.Subscriber('hcsr04', hcsr04_msg, callback_hcsr04)
    rospy.Subscriber('object_detection/detections', DetectionArray, callback_camera)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

if __name__ == '__main__':

    hcsr04_sensors = [
                        Hcsr04('lateral_left'),
                        Hcsr04('lateral_right'),
                        Hcsr04('frontal_left_left'),
                        Hcsr04('frontal_left'),
                        Hcsr04('frontal_right'),
                        Hcsr04('frontal_right_right'),
                        Hcsr04('bottom_left'),
                        Hcsr04('bottom_right')
                    ]

    listener()
