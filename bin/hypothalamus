#!/usr/bin/env python
import rospy
import time
from std_msgs.msg import String
from std_msgs.msg import Float64
from brain.msg import visual_association_cortex_msg, hormone_msg, auditory_association_cortex_msg
from brain.srv import SetHormone, SetHormoneResponse

def callback_visual_association_cortex(data):
    rospy.loginfo(rospy.get_caller_id() + '\n {}'.format(data))


def callback_auditory_association_cortex(data):
    rospy.loginfo(rospy.get_caller_id() + '\n {}'.format(data))


def callback_hormones(data):
    rospy.loginfo(rospy.get_caller_id() + '\n {}'.format(data))
    hormones = data


def listener():
    rospy.init_node('hypothalamus', anonymous=True)
    rospy.Subscriber('visual_association_cortex', visual_association_cortex_msg, callback_visual_association_cortex)
    rospy.Subscriber('auditory_association_cortex', auditory_association_cortex_msg, callback_auditory_association_cortex)
    rospy.Subscriber('hormones', hormone_msg, callback_hormones)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()


def engage_stress_response():
    pub.publish("cortisol", 50)

    # waiting a few seconds for the epinephrine to be virtually reabsorbed
    time.sleep(3)

    pub.publish("cortisol", 0)


def engage_affection_response():
    pub.publish("oxytocin", 50)

    # waiting a few seconds for the oxytocin to be virtually reabsorbed
    time.sleep(3)

    pub.publish("oxytocin", 0)


def engage_motivation_response():
    pub.publish("dopamine", 50)

    # waiting a few seconds for the dopamine to be virtually reabsorbed
    time.sleep(3)

    pub.publish("dopamine", 0)


if __name__ == '__main__':

    pub = rospy.Publisher('hormones', hormone_msg, queue_size=10)
    listener()
